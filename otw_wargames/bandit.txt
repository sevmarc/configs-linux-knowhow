SSH login format:
bandit<X> -> bandit<X+1>
    ssh -p 2220 -l bandit<X+1> bandit.labs.overthewire.org
    pass


Notes:
bandit0:
ssh -p 2220 -l bandit0 bandit.labs.overthewire.org

bandit1:
ls
cat readme
boJ9jbbUNNfktd78OOpsqOltutMc3MY1
exit

bandit2:
google: "dashed filename" -> need full location
cat ./-
CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9

bandit3:
google "spaces in filenames" -> https://askubuntu.com/questions/516772/how-to-access-files-directories-with-spaces-in-the-name

cat spaces\ in\ this\ filename
UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK

bandit4:
cd inhere
cat .hidden
pIwrPrtPN36QITSp3EQaw936yaFoFgAB

bandit5:
cd inhere
file <filename> -> many data, 1 ASCII text file -> pass
koReBOKuIDDepwhWk7jZC0RTdopnAYKh


bandit6:
The password for the next level is stored in a file somewhere under the inhere directory and has all of the following properties:

- human-readable
- 1033 bytes in size
- not executable
--------------
find ./inhere/ -type f -size 1033c -exec ls {} \;
looking inside folder 'inhere', for file with size 1033 bytes, and listing results
As units you can use:
    b - for 512-byte blocks (this is the default if no suffix is used)
    c - for bytes
    w - for two-byte words
    k - for Kilobytes (units of 1024 bytes)
    M - for Megabytes (units of 1048576 bytes)
    G - for Gigabytes (units of 1073741824 bytes)

cat ./inhere/maybehere07/.file2
DXjZPULLxYr17uwoI01bNLQbtFemEgo7


bandit7:
- owned by user bandit7
- owned by group bandit6
- 33 bytes in size

find / -user bandit7 -group bandit6 -type f -size 33c 2>/dev/null
    2>/dev/null = errors supressed ('Permission denied')
cat /var/lib/dpkg/info/bandit7.password
HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs


bandit8:
- The password for the next level is stored in the file data.txt next to the word 'millionth'
Commands you may need to solve this level
grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd

grep "millionth" data.txt
cvX2JJa4CFALtqS87jk27qwqGhBM9plV


bandit9:
The password for the next level is stored in the file data.txt and is the only line of text that occurs only once

hint: https://ryanstutorials.net/linuxtutorial/piping.php
uniq: when fed a text file or STDIN, outputs the text with adjacent identical lines collapsed to one, unique line of text

"Piping the output into sort organises the output into alphabetical/numerical order. This is a requirement because uniq only matches on repeated lines"

sort data.txt | uniq -c | grep "1 " -> 1 UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR


bandit10:
The password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several ‘=’ characters.

strings data.txt | grep "===" ->
========== the*2i"4
========== password
Z)========== is
&========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk


bandit11:
The password for the next level is stored in the file data.txt, which contains base64 encoded data

file data.txt -> data.txt: ASCII text
cat data.txt -> VGhlIHBhc3N3b3JkIGlzIElGdWt3S0dzRlc4TU9xM0lSRnFyeEUxaHhUTkViVVBSCg==
base64 -d data.txt -> The password is IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR


bandit12:
The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions.
using cybersecurity/cryptography/cryptoanalysis tool:
Gur cnffjbeq vf 5Gr8L4qetPEsPk8htqjhRK8XSP6x2RHh
The password is 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu


bandit13:
The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work using mkdir. For example: mkdir /tmp/myname123. Then copy the datafile using cp, and rename it using mv (read the manpages!)
help: https://en.wikipedia.org/wiki/Hex_dump

renaming tp hex (hexdump)
    mv data.txt data.hex 
return original text from hexdump
    xxd -r data.hex data.txt
    inspection: file data.txt -> 
    data.txt: gzip compressed data, was "data2.bin", last modified: Thu May  7 18:14:30 2020, max compression, from Unix
decompress
    gzip -d data.txt
    file data -> data: bzip2 compressed data, block size = 900k
    mv data.gz data.bz2
decompress (second layer)
    bzip2 -d data.bz2
    inspection: file data -> data: gzip compressed data, was "data4.bin", last modified: Thu May  7 18:14:30 2020, max compression, from Unix
decompress (third layer)
    mv data data.gz
    gzip -d data.gz
    inspection: file data ->   data: POSIX tar archive (GNU)
decompress (fourth layer)
    mv data data.tar.gz
    tar -xf data.tar.gz
    inspection: file data5.bin -> POSIX tar archive (GNU)
decompress (fifth layer)    
    mv data5.bin data5.tar.gz
    tar -xf data5.tar.gz
    inspection: file data6.bin -> data6.bin: bzip2 compressed data, block size = 900k
decompress (sixth layer)
    mv data6.bin data6.bz2
    bzip2 -d data6.bz2 -> data6
    inspection: file data6 -> data6: POSIX tar archive (GNU)
decompress (seventh layer)
    mv data6 data7.tar.gz
    tar -xf data7.tar.gz -> data8.bin
    inspection: file data8.bin -> gzip compressed data, was "data9.bin", last modified: Thu May  7 18:14:30 2020, max compression, from Unix
decompress (eigth layer)
    mv data8.bin data9.gz
    inspection: file data9 -> data9: ASCII text
cat data9 -> 
The password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL


bandit14:
The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don’t get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working on

hint: https://help.ubuntu.com/community/SSH/OpenSSH/Keys

ssh bandit14@localhost -i sshkey.private
cat /etc/bandit_pass/bandit14
4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e


bandit15:
The password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.

hint: ssh, telnet, nc, openssl, s_client, nmap

echo "4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e" | nc localhost 30000
Correct!
BfMYroe26WYalil77FoDi9qh59eK5xNr
